!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.npy_npz.NpzDataset {
        file: "%(dataset)s/train.npz",
        key: "X",
        target_key: "G",
    },
    model: !obj:cm.CMModel {
        nvis: %(nvis)d,
        nhid: %(nhid)d,
        num_S: %(num_S)d,
        init_W: "ae_%(dataset)s_best.pkl",
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 1000,
        learning_rate: 2e-1,
        monitoring_dataset: {
            'train' : *train,
            "valid": !obj:pylearn2.datasets.npy_npz.NpzDataset {
                file: "%(dataset)s/valid.npz",
                key: "X",
                target_key: "G",
            },
            "test": !obj:pylearn2.datasets.npy_npz.NpzDataset {
                file: "%(dataset)s/test.npz",
                key: "X",
                target_key: "G",
            },
        },
        cost: !obj:cm.L2Cost {},
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.AdaGrad {
        },
        termination_criterion : !obj:pylearn2.termination_criteria.MonitorBased {
            prop_decrease : 1e-4,
            N : 10,
            channel_name: "train_objective"
        },
    },
    extensions : [
    !obj:pylearn2.training_algorithms.sgd.MonitorBasedLRAdjuster {
        channel_name: "train_objective"
    },
    !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'train_objective',
             save_path: "cm_%(dataset)s_%(num_S)d_best.pkl"
    },
    ],
}
